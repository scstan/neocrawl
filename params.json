{"name":"Neocrawl","tagline":"neocrawl is built as a microservice that mediates any listing, finding or filtering request between an api and a neo4j database.","body":"<h1>neocrawl</h1>\r\n<br>\r\n<h4>DESCRIPTION</h4>\r\n<h5><strong>NEOCRAWL</strong> is built as a service/microservice that mediates any listing, finding or filtering request between an api and a neo4j database. The communication is done over rest api.\r\n<br>This service alows you to find/list any node from within your neo4j database using related nodes properties (from any relationship distance)\r\n<br>It was build as light as possible and it's only purpose is to generate appropriate cypher queries based on given filters and not intens processing </h5>\r\n<br>\r\n\r\n```\r\nIssues, Pull requests and Enhancement requests are very welcomed and encouraged ! :D\r\n```\r\n<h4>REQUIREMENTS</h4>\r\n<p>1. All neo4j database clients must have version of at least 2.2.0 for the setup part</p>\r\n<p>The search/listing works with lower versions but it's not recommended</p>\r\n<p>It is also recommended to use the latest stable neo4j version</p>\r\n<p>2. Node.js version of at least v4.2.1</p>\r\n<p> In this case it is also recommended to use the latest stable node.js version</p>\r\n<p>3. A unix/linux based environment for the service deployment </p>\r\n<br>\r\n<h4>DEPLOYMENT</h4>\r\n<h3> As a node module </h3>\r\n<p>Using npm:</p>\r\n```\r\nnpm i --save neocrawl\r\n```\r\n<p>In Node.js:</p>\r\n```\r\nvar neocrawl = require('neocrawl');\r\n```\r\n\r\n<h3> As a microservice </h3>\r\n<p>1. Clone the repo </p>\r\n```\r\ngit clone https://github.com/scstan/neocrawl.git\r\n```\r\n<p>or</p>\r\n```\r\ngit clone git@github.com:scstan/neocrawl.git\r\n```\r\n<p>2. Install all dependencies </p>\r\n```\r\nnpm install\r\n```\r\n<p>3. Edit the config.json with appropriate host and port to suit your needs </p>\r\n<p>4. Start the service by starting either of app.js or clusters.js: </p>\r\n```\r\nnode app.js / node cluster.js\r\n```\r\n<br>\r\n<h4>USAGE</h4>\r\n<h3> As a node module </h3>\r\n\r\n<p>The enlisted enpoints below are transformed into promised methods</p>\r\n```\r\nex:\r\nneocrawl\r\n  .setupdb(parameters) //       <== the promise's parameters are exactly the requests body as stated below  \r\n  .then(result => do_stuff())\r\n  .catch(err   => log_err())\r\n```\r\n<br>\r\n<p>Methods:</p>\r\n<ul>\r\n  <li>neocrawl.setupdb(params)</li>\r\n  <li>neocrawl.getgraph(params)</li>\r\n  <li>neocrawl.search(params)</li>\r\n</ul>\r\n<br>\r\n<h3> As a microservice </h3>\r\n<p> This service provides 3 rest api endpoints. </p>\r\n<p>1. SetupDB </p>\r\n<p>This will generate a .json, in the graphs directory, with all the \"models\" in your database\r\n<br>Every usage of this endpoint updates the .json with your latest database mapping\r\n<br>It is recommended to use this endpoint everytime you deploy you application\r\n<br>Please note that this may take a bit depending on your database size</p>\r\n```\r\nPOST {{base_url}}/api/setupdb\r\n```\r\n```\r\n{\r\n    \"dbAlias\": \"localhost\",        // <= this will be the base_name for you .json [MANDATORY]\r\n    \"dbUrl\": \"localhost:7474\",     // <= target neo4j database base_url or ip:port [MANDATORY]\r\n    \"update\": false                // <= if you already setted up a db with the given alias neocrawl will only allow you to update it by sending this\r\n                                        parameter as true [OPTIONAL]\r\n}\r\n```\r\n<p>2. Get Graph </p>\r\n<p> This will retrieve the generated map previously created using setupdb endpoint</p>\r\n```\r\nPOST {{base_url}}/api/getgraph\r\n```\r\n```\r\n{\r\n    \"dbAlias\": \"localhost\",        // <= this will be used to locate your mapped database [MANDATORY]\r\n}\r\n```\r\n<p> Response example [the key in this returned map is the actual label of the node]</p>\r\n```\r\n{\r\n  ...\r\n  \"User\": {\r\n    \"relatedNodes\": [\r\n      \"Role\",\r\n      \"_Role\"\r\n    ],\r\n    \"properties\": [\r\n      ...\r\n      \"password\",\r\n      \"id\",\r\n      \"email\",\r\n      ...\r\n    ]\r\n  },\r\n  ...\r\n}\r\n```\r\n<p>3. Search </p>\r\n<p> This is the main endpoint which retrieves results base on you request</p>\r\n\r\n```\r\nPOST {{base_url}}/api/search\r\n```\r\n```\r\n{\r\n    \"dbAlias\": \"localhost\",            // <= this will be used to locate your mapped database [MANDATORY]\r\n    \"node\": \"User\",                    // <= requested node label [MANDATORY]\r\n    \"dbUrl\": \"http://localhost:7474/\", // <= target db [MANDATORY]\r\n    \"offset\": 1,                       // <= first page aka skip 0 [MANDATORY]\r\n    \"limit\": 10,                       // <= self explanatory [MANDATORY]\r\n    \"orderBy\": \"idRestaurant\",         // <= [OPTIONAL]\r\n    \"direction\": \"asc\",                // <= [OPTIONAL]\r\n    \"debug\": true,                     // <= prints out the generated neo4j cypher query [OPTIONAL]\r\n    \"filters\": {                       // <= filters list [MANDATORY but can be left empty]\r\n        \"User.email\": {\r\n            \"like\": \"@gmail\"\r\n        },\r\n        \"User.lastName\": {\r\n            \"like\":\"smith\"\r\n        },\r\n        \"User.customImage\":{\r\n            \"has\": false\r\n        }\r\n    },\r\n    \"return\":\"{user:User, roles:collect(distinct(Role))}\"\r\n              //  <= custom return must be a stringified representation. [OPTIONAL].\r\n}             // if custom return is not provided the search will return a list of ids   \r\n              // based on the requested node type\r\n```\r\n\r\n<h3>FILTERS </h3>\r\n<p>The filter key is composed in the following manner LABEL.PROPERTY_NAME</p>\r\n<p>Filters can be provided either by direct assignment</p>\r\n\r\n```\r\n\"User.email\": \"eric@gmail.com\"    // <= this defaults to the eq operator\r\n```\r\n<p>Or by picking an operator from the bellow list:</p>\r\n```\r\nex: \"User.lastName\": {\r\n            \"like\":\"smith\"\r\n        }\r\n```\r\n```\r\n'eq': =\r\n'lt': <\r\n'le': <=\r\n'gt': >\r\n'ge': >=\r\n'ne': <>\r\n'in': checks that the given property [array] contains the given value\r\n'out': checks that the given property [array] does not contain the given value\r\n'has': checks if the given property exists on the node [boolean]\r\n'containsAny': checks that ANY of the elements from the value [array] is found in the given property [array]\r\n'containsAll': checks that ALL of the elements from the value [array] is found in the given property [array]\r\n'excludesAny': checks that ANY of the elements from the value [array] are not found in the given property [array]\r\n'excludesAll': checks that ALL of the elements from the value [array] are not found in the given property [array]\r\n'like': checks that property fully or partially contains the given value [number or string | case insensitive]\r\n'regex': checks the given regex against the given property\r\n```\r\n\r\n<h4> Issues, Pull requests and Enhancement requests are very welcomed and encouraged ! :D<h4>\r\n<p>The End</p>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
